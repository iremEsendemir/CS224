CS224
Lab No: 5
Section No: 4
Emine Ä°rem Esendemir
22202103



`timescale 1ns / 1ps
module for_basys(
    input logic clk,             // 100 MHz clock from BASYS3
    input logic btnC,           // Center button for reset
    input logic btnU,           // Up button for clock pulse
    output logic [6:0] seg,     // 7-segment display segments
    output logic dp,            // Decimal point
    output logic [3:0] an,      // 7-segment display digit select
    output logic [4:0] led     // LEDs for control signals
);
    // Internal signals
    logic clk_pulse, reset_pulse;  
    logic [31:0] writedata, dataaddr;  
    logic memwrite, regwrite;          
    logic [31:0] pcf, pc;         
    logic lwstall, branchstall, branch;
    logic [4:0] writereg, rsD, rtD, regdst;
    
    pulse_controller clock_ctrl(clk,btnU,btnC,clk_pulse);


    pulse_controller reset_ctrl(clk,btnC,1'b0,reset_pulse);

    mips mips_basys( clk_pulse, reset_pulse, writedata, dataaddr, memwrite, regwrite, pcf, pc, lwstall, branchstall, branch, writereg, rsD, rtD, regdst);
       

    logic [3:0] digits [3:0];
    
    assign digits[0] = writedata[3:0];
    assign digits[1] = writedata[7:4];
    
    assign digits[2] = dataaddr[3:0];
    assign digits[3] = dataaddr[7:4];

    display_controller display_ctrl(
        .clk(clk),                 
        .in0(digits[0]),      
        .in1(digits[1]),   
        .in2(digits[2]),   
        .in3(digits[3]),
        .seg(seg),
        .dp(dp),
        .an(an)
    );

    assign led[4] = regwrite;    
    assign led[3] = memwrite;    
    assign led[2] = lwstall;     
    assign led[1] = branchstall;
    assign led[0] = branch;     

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: mips
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module mips (
    input  logic        clk, reset,
    output logic [31:0] writedata, dataaddr,
    output logic        memwrite, regwrite,
    output logic [31:0] pcf, pc,
    output logic        lwstall, branchstall, branch,
    output logic [4:0]  writereg, rsD, rtD, regdst
    );

    // Internal signals
    logic        memtoreg, alusrc, regWriteD, jump;
    logic [2:0]  alucontrol;
    logic [5:0]  op, funct;
    logic        MemWriteD;

    datapath dp (
        .clk(clk),
        .reset(reset),
        .RegWriteD(regWriteD),
        .MemtoRegD(memtoreg),
        .MemWriteD(MemWriteD),
        .ALUControlD(alucontrol),
        .ALUSrcD(alusrc),
        .RegDstD(regdst),
        .BranchD(branch),
        .JumpD(jump),
        
        .op(op),
        .funct(funct),

        .RegWriteE(regwrite),
        .MemWriteE(memwrite),
        .ALUOutE(dataaddr),
        .WriteDataE(writedata),
        .PCF(pcf),
        .PC(pc),
        .WriteRegE(writereg),
        .lwstall(lwstall),
        .branchstall(branchstall)
    );

    controller cont (
        .op(op),
        .funct(funct),
        .memtoreg(memtoreg),
        .memwrite(MemWriteD),
        .alusrc(alusrc),
        .regdst(regdst),
        .regwrite(regWriteD),
        .jump(jump),
        .alucontrol(alucontrol),
        .branch(branch)
    );

endmodule



`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: datapath
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module datapath (
    input  logic        clk, reset,
    input  logic        RegWriteD, MemtoRegD, MemWriteD,
    input  logic [2:0]  ALUControlD, 
    input  logic        ALUSrcD, RegDstD, BranchD, JumpD,          
                
    output logic [5:0]  op, funct,      // For controller
    output logic        RegWriteE,       // For regwrite output
    output logic        MemWriteE,       // For memwrite output
    output logic [31:0] ALUOutE,        // For dataaddr output
    output logic [31:0] WriteDataE,     // For writedata output
    output logic [31:0] PCF, PC,   // For program counter outputs
    output logic [4:0]  WriteRegE,       // For writereg output
    output logic        lwstall, branchstall  // For hazard detection outputs
    ); 
    
    // Internal signals
    logic  stallF, stallD, ForwardAD, ForwardBD, FlushE;
    logic  PcSrcD,MemtoRegW, RegWriteW, pFtoDclr, EqualD, RegWriteM, MemtoRegE, MemtoRegM, ALUSrcE, RegDstE;
    logic [1:0]  ForwardAE, ForwardBE;
    logic [2:0]  ALUControlE;
    logic [4:0]  WriteRegW, WriteRegM, RsE, RtE, RdD, RdE, RsD, RtD;
    logic [31:0] ALUOutW, ReadDataW, ResultW, PCjump, PcBranchD, PcPlus4F, instrF;
    logic [31:0] instrD, PcPlus4D, rd1d_output, rd2d_output, RD1, RD2, SignImmD;
    logic [31:0] SignImmShifted, RD1E, RD2E, SignImmE, SrcAE, SrcBE, ALUOutM, WriteDataM;
    logic [31:0] ReadDataM;

    

    // Datapath implementation
    mux2 #(32) result_mux(ALUOutW, ReadDataW, MemtoRegW, ResultW);
    
    PipeWtoF pWtoF(PC, ~stallF, clk, reset, PCF);                            
    
    adder pc_adder(PCF, 4, PcPlus4F);
    
               
    mux2 #(32) jump_mux(PcPlus4F, { PcPlus4D[31:28], instrD[25:0], 2'b00}, JumpD, PCjump);
    mux2 #(32) pc_mux(PCjump, PcBranchD, PcSrcD, PC);  
    
    imem im1(PCF[7:2], instrF);                                        
    
    assign pFtoDclr = PcSrcD | JumpD;
    
    PipeFtoD pFtoD(instrF, PcPlus4F, ~stallD, clk, pFtoDclr, reset, instrD, PcPlus4D);    
    
    assign EqualD = rd1d_output == rd2d_output;
    assign PcSrcD = BranchD && EqualD;
    
    assign op = instrD[31:26];
    assign funct = instrD[5:0];
    
    assign RsD = instrD[25:21];
    assign RtD = instrD[20:16];
    assign RdD = instrD[15:11];
    
    
    regfile rf(clk, reset, RegWriteW, instrD[25:21], instrD[20:16],
                WriteRegW, ResultW, RD1, RD2);                            
    
    signext signextend (instrD[15:0], SignImmD);
    sl2 shiftimmmediate (SignImmD, SignImmShifted);
    adder branchadder (SignImmShifted, PcPlus4D, PcBranchD);
    
    mux2 #(32) RD1mux (RD1, ALUOutM, ForwardAD, rd1d_output);
    mux2 #(32) RD2mux (RD2, ALUOutM, ForwardBD, rd2d_output);
    
    
    PipeDtoE pDtoE (clk, FlushE, reset,
                    RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                    ALUControlD,
                    RD1, RD2,SignImmD,
                    RsD, RtD, RdD,
                    RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                    ALUControlE,
                    RD1E, RD2E, SignImmE,
                    RsE, RtE, RdE
                    );
        
    mux2 #(5) writeregmux (RtE, RdE, RegDstE, WriteRegE);
    
    mux3 #(32) ForwardAEmux (RD1E, ResultW, ALUOutM, ForwardAE, SrcAE);
    mux3 #(32) ForwardBEmux (RD2E, ResultW, ALUOutM, ForwardBE, WriteDataE);
    
    mux2 #(32) SrcBEmux (WriteDataE, SignImmE, ALUSrcE, SrcBE);
    
    alu alu (SrcAE, SrcBE, ALUControlE, ALUOutE);
                                
    PipeEtoM pEtoM (clk, reset,
                    RegWriteE, MemtoRegE, MemWriteE,
                    ALUOutE, WriteDataE,
                    WriteRegE,
                    RegWriteM, MemtoRegM, MemWriteM,
                    ALUOutM, WriteDataM,
                    WriteRegM
                    );
    
    dmem dmem (clk, MemWriteM, ALUOutM, WriteDataM, ReadDataM);
    
    PipeMtoW pMtoW (clk, reset,
                    RegWriteM, MemtoRegM,
                    ReadDataM, ALUOutM,
                    WriteRegM,
                    RegWriteW, MemtoRegW,
                    ReadDataW, ALUOutW,
                    WriteRegW
                    );
                    
     HazardUnit hu (
        .RegWriteW(RegWriteW),
        .WriteRegW(WriteRegW),
        .RegWriteM(RegWriteM),
        .MemtoRegM(MemtoRegM),
        .WriteRegM(WriteRegM),
        .WriteRegE(WriteRegE),
        .RegWriteE(RegWriteE),
        .MemtoRegE(MemtoRegE),
        .rsE(RsE),
        .rtE(RtE),
        .rsD(RsD),
        .rtD(RtD),
        .BranchD(BranchD),
        .JumpD(JumpD),
        .ForwardAD(ForwardAD),
        .ForwardBD(ForwardBD),
        .ForwardAE(ForwardAE),
        .ForwardBE(ForwardBE),
        .FlushE(FlushE),
        .StallD(stallD),
        .StallF(stallF),
        .lwstall(lwstall),
        .branchstall(branchstall)
    );

endmodule




`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
         jump, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b110000100; // R-type
      6'b100011: controls <= 9'b101001000; // LW
      6'b101011: controls <= 9'b001010000; // SW
      6'b000100: controls <= 9'b000100010; // BEQ
      6'b001000: controls <= 9'b101000000; // ADDI
      6'b000010: controls <= 9'b000000001; // J
      default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: PipeWtoF
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset) begin
                    if (reset) begin
                        PCF <= 0;
                    end else if (EN) begin
                        PCF <= PC;
                    end
                end
endmodule




`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: adder
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: imem
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	*************************
//	Here, you can paste your own test cases that you prepared for the part 1-g.
//	Below is a program from the single-cycle lab.
//	*************************
//
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800004;    // beq deÄiÅtirdim, branclediÄi gÃ¶rÃ¼nsÃ¼n diye
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h08000011;
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'hac020054;
		8'h48: instr = 32'h08000012;	// j 48, so it will loop here
		
		// for load use
		/*8'h00: instr = 32'h20080001;  	// add $t0, $0, 1
		8'h04: instr = 32'h20090002;  	// add $t1, $0, 2
		8'h08: instr = 32'had090000;      // sw $t1, 0($t0)
		8'h0c: instr = 32'h8d0b0000;     // lw $t3, 0($t0)
		8'h10: instr = 32'h012b4020;     // add $t0, $t1, $t3
		8'h14: instr = 32'h08000005;*/   // j 14
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule







`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: PipeFtoD
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, clear, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk or posedge reset)
                    if (reset | clear) 
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else 
                        if(EN)
                        begin
                        instrD<=instr;
                        PcPlus4D<=PcPlus4F;
                        end
                
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: regfile
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
	 if (reset)
		for (int i=0; i<32; i++) rf[i] = 32'b0;
     else if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule




`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: signext
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule




`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: sl2
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule







module PipeDtoE(input logic clk, clear, reset, // clear -> FlushE
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic [2:0] ALUControlD,
                input logic [31:0] RD1D, RD2D, SignImmD,
                input logic [4:0] RsD, RtD, RdD,
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                output logic [2:0] ALUControlE,
                output logic [31:0] RD1E, RD2E,SignImmE,
                output logic [4:0] RsE, RtE, RdE
                );
                
                always_ff @(posedge clk or posedge reset)
                begin
                    if ( reset || clear) 
                    begin
                        RegWriteE <= 0;
                        MemtoRegE <= 0;
                        MemWriteE <= 0;
                        ALUControlE <= 0;
                        ALUSrcE <= 0;
                        RegDstE <= 0;
                        RD1E <= 0;
                        RD2E <= 0;
                        RsE <= 0;
                        RtE <= 0;
                        RdE <= 0;
                        SignImmE <= 0;
                    end
                    else begin
                            RegWriteE <= RegWriteD;
                            MemtoRegE <= MemtoRegD;
                            MemWriteE <= MemWriteD;
                            ALUControlE <= ALUControlD;
                            ALUSrcE <= ALUSrcD;
                            RegDstE <= RegDstD;
                            RD1E <= RD1D;
                            RD2E <= RD2D;
                            RsE <= RsD;
                            RtE <= RtD;
                            RdE <= RdD;
                            SignImmE <= SignImmD;
                        end
                end
                      
endmodule







`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: mux3
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module mux3 #(parameter WIDTH = 32) (
    input  logic [WIDTH-1:0] i0, 
    input  logic [WIDTH-1:0] i1, 
    input  logic [WIDTH-1:0] i2, 
    input  logic [1:0]       sel, 
    output logic [WIDTH-1:0] out  
);

    always_comb begin
        case (sel)
            2'b00: out = i0; 
            2'b01: out = i1;
            2'b10: out = i2; 
            default: out = {WIDTH{1'b0}}; 
        endcase
    end

endmodule






`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: alu
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule






`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: PipeEtoM
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module PipeEtoM(input logic clk, clear,
                input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic [31:0] ALUOutE, WriteDataE,
                input logic [4:0] WriteRegE,
                output logic RegWriteM, MemtoRegM, MemWriteM,
                output logic [31:0] ALUOutM, WriteDataM,
                output logic [4:0] WriteRegM
                );
                
                always_ff @(posedge clk or posedge clear)
                begin
                    if ( clear )
                    begin
                        RegWriteM <= 0;
                        MemtoRegM <= 0;
                        MemWriteM <= 0;
                        ALUOutM <= 0;
                        WriteDataM <= 0;
                        WriteRegM <= 0;
                    end
                    else begin
                        RegWriteM <= RegWriteE;
                        MemtoRegM <= MemtoRegE;
                        MemWriteM <= MemWriteE;
                        ALUOutM <= ALUOutE;
                        WriteDataM <= WriteDataE;
                        WriteRegM <= WriteRegE;
                    end
                end
endmodule







`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: dmem
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule





`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:40:46
// Design Name: 
// Module Name: PipeMtoW
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module PipeMtoW(input logic clk, reset,
                input logic RegWriteM, MemtoRegM,
                input logic [31:0] ReadDataM, ALUOutM,
                input logic [4:0] WriteRegM,
                output logic RegWriteW, MemtoRegW,
                output logic [31:0] ReadDataW, ALUOutW,
                output logic [4:0] WriteRegW
                );
		        
		        always_ff @(posedge clk or posedge reset)
		        begin
		            if (reset) 
		            begin
                        RegWriteW <= 0;
                        MemtoRegW <= 0;
                        ReadDataW <= 0;
                        ALUOutW <= 0;
                        WriteRegW <= 0;
		            end
		            else 
		            begin
                        RegWriteW <= RegWriteM;
                        MemtoRegW <= MemtoRegM;
                        ReadDataW <= ReadDataM;
                        ALUOutW <= ALUOutM;
                        WriteRegW <= WriteRegM;
		            end
		        end
		         
endmodule








module HazardUnit(
    input  logic        RegWriteW,
    input  logic [4:0]  WriteRegW,
    input  logic        RegWriteM, MemtoRegM,
    input  logic [4:0]  WriteRegM, WriteRegE,
    input  logic        RegWriteE, MemtoRegE,
    input  logic [4:0]  rsE, rtE,
    input  logic [4:0]  rsD, rtD,
    input  logic        BranchD, JumpD,
    output logic        ForwardAD, ForwardBD,
    output logic [1:0]  ForwardAE, ForwardBE,
    output logic        FlushE, StallD, StallF,
    output logic        lwstall, branchstall
);
    
    always_comb begin   
        // Execute stage forwarding
        if (rsE != 0 & rsE == WriteRegM & RegWriteM)
            ForwardAE = 2'b10;
        else if (rsE != 0 & rsE == WriteRegW & RegWriteW)
            ForwardAE = 2'b01;
        else
            ForwardAE = 2'b00;
            
        if (rtE != 0 & rtE == WriteRegM & RegWriteM)
            ForwardBE = 2'b10;
        else if (rtE != 0 & rtE == WriteRegW & RegWriteW)
            ForwardBE = 2'b01;
        else
            ForwardBE = 2'b00;
            
            
        lwstall = MemtoRegE & (rtE == rsD | rtE == rtD);
        branchstall = (BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD))
                      | (BranchD & MemtoRegM & (WriteRegM == rsD | WriteRegM == rtD));
        
        // Decode stage forwarding
        ForwardAD = (rsD != 0) & RegWriteM & (rsD == WriteRegM);
        ForwardBD = (rtD != 0) & RegWriteM & (rtD == WriteRegM);
        
        StallF = lwstall | branchstall;
        StallD = lwstall | branchstall;
        FlushE = lwstall | branchstall | JumpD;
        
        
    end
endmodule






`timescale 1ns / 1ps

module display_controller(

    input clk,
    input [3:0] in3, in2, in1, in0,
    output [6:0]seg, logic dp,
    output [3:0] an
    );

    localparam N = 18;
    
    logic [N-1:0] count = {N{1'b0}};
    always@ (posedge clk)
        count <= count + 1;
    
    logic [4:0]digit_val;
    
    logic [3:0]digit_en;
    always@ (*) begin
        digit_en = 4'b1111;
        digit_val = in0;
        
        case(count[N-1:N-2])
        
        2'b00 :	//select first 7Seg.
        
            begin
                digit_val = {1'b0, in0};
                digit_en = 4'b1110;
            end
    
        2'b01:	//select second 7Seg.
        
            begin
                digit_val = {1'b0, in1};
                digit_en = 4'b1101;
            end
        
        2'b10:	//select third 7Seg.
        
            begin
                digit_val = {1'b0, in2};
                digit_en = 4'b1011;
            end
        
        2'b11:	//select forth 7Seg.
        
            begin
                digit_val = {1'b0, in3};
                digit_en = 4'b0111;
            end
        endcase
    end
    
    //Convert digit number to LED vector. LEDs are active low.
    
    logic [6:0] sseg_LEDs;
    always @(*)
    begin
        sseg_LEDs = 7'b1111111; //default
        case( digit_val)
            5'd0 : sseg_LEDs = 7'b1000000; //to display 0
            5'd1 : sseg_LEDs = 7'b1111001; //to display 1
            5'd2 : sseg_LEDs = 7'b0100100; //to display 2
            5'd3 : sseg_LEDs = 7'b0110000; //to display 3
            5'd4 : sseg_LEDs = 7'b0011001; //to display 4
            5'd5 : sseg_LEDs = 7'b0010010; //to display 5
            5'd6 : sseg_LEDs = 7'b0000010; //to display 6
            5'd7 : sseg_LEDs = 7'b1111000; //to display 7
            5'd8 : sseg_LEDs = 7'b0000000; //to display 8
            5'd9 : sseg_LEDs = 7'b0010000; //to display 9
            5'd10: sseg_LEDs = 7'b0001000; //to display a
            5'd11: sseg_LEDs = 7'b0000011; //to display b
            5'd12: sseg_LEDs = 7'b1000110; //to display c
            5'd13: sseg_LEDs = 7'b0100001; //to display d
            5'd14: sseg_LEDs = 7'b0000110; //to display e
            5'd15: sseg_LEDs = 7'b0001110; //to display f
            5'd16: sseg_LEDs = 7'b0110111; //to display "="
            default : sseg_LEDs = 7'b0111111; //dash 
        endcase
    end
    
    assign an = digit_en;
    
    assign seg = sseg_LEDs;
    assign dp = 1'b1; //turn dp off
    
endmodule





/////////////////////////////////////////////////////////////////////////////////
// 
//   This module takes a slide switch or pushbutton input and 
//   does the following:
//     --debounces it (ignoring any addtional changes for ~40 milliseconds)
//     --synchronizes it with the clock edges
//     --produces just one pulse, lasting for one clock period
//   
//   Note that the 40 millisecond debounce time = 2000000 cycles of 
//   50MHz clock (which has 20 nsec period)
//   
//   Inputs/Outputs:
//   sw_input: the signal coming from the slide switch or pushbutton
//   CLK: the system clock on the BASYS3 board
//   clear: resets the pulse controller
//   clk_pulse: the synchronized debounced single-pulse output
//
//   Usage for CS224 Lab4-5: 
//   - Give the BASYS3 clock and the push button signal as inputs
//   - You don't need to clear the controller
//   - Send the output pulse to your top module
//   
//   For correct connections, carefully plan what should be in the .XDC file
//
//////////////////////////////////////////////////////////////////////////////////

module pulse_controller(
	input CLK, sw_input, clear,
	output reg clk_pulse );

	 reg [2:0] state, nextstate;
	 reg [27:0] CNT; 
	 wire cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule







`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.11.2024 22:56:45
// Design Name: 
// Module Name: mips_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module mips_tb();
    // Test signals
    logic clk;
    logic reset;
    logic [31:0] writedata, dataaddr;
    logic memwrite, regwrite;
    logic [31:0] pcf, pc;
    logic lwstall, branchstall, branch;
    logic [4:0] writereg, rsD, rtD, regdst;

    mips dut(clk, reset, writedata, dataaddr, memwrite, regwrite,
             pcf, pc, lwstall, branchstall, branch,
             writereg, rsD, rtD, regdst);

    logic [31:0] instruction;
    assign instruction = dut.dp.instrD;

    always begin
        clk = 1; #5;
        clk = 0; #5;
    end

    initial begin
        $display("\nTime-PC-Instruction-Dataaddr-Writedata-Regwrite-Memwrite-Stalls-Branch");        
        
        // Start with reset
        reset = 1;
        @(posedge clk);
        @(posedge clk);
        reset = 0;

        repeat(30) begin
            @(negedge clk); 
            $display("%0t\t%h\t%h\t%h\t%h\t%h\t%h\t%h%h\t%h", 
                    $time, pcf, instruction, dataaddr, writedata, regwrite, memwrite,
                    lwstall, branchstall, branch);
        end
        
        $display("\nSimulation finished");
        $finish;
    end

    always @(negedge clk) begin
        if (memwrite) begin
            $display("memwrite %0t: dataaddr=%h, writedata=%h", 
                    $time, dataaddr, writedata);
        end
    end
endmodule










