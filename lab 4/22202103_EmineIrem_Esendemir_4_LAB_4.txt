CS224
Lab 4
Section 4
Emine Ä°rem Esendemir
22202103
15/11/2024



 `timescale 1ns / 1ps

// Top level system including MIPS and memories
module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] readdata,           
	     output  logic       memwrite);    

   logic [31:0] instr, pc;
   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:0], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule



`timescale 1ns / 1ps

module display_controller(

    input clk,
    input [3:0] in3, in2, in1, in0,
    output [6:0]seg, logic dp,
    output [3:0] an
    );

    localparam N = 18;
    
    logic [N-1:0] count = {N{1'b0}};
    always@ (posedge clk)
        count <= count + 1;
    
    logic [4:0]digit_val;
    
    logic [3:0]digit_en;
    always@ (*) begin
        digit_en = 4'b1111;
        digit_val = in0;
        
        case(count[N-1:N-2])
        
        2'b00 :	//select first 7Seg.
        
            begin
                digit_val = {1'b0, in0};
                digit_en = 4'b1110;
            end
    
        2'b01:	//select second 7Seg.
        
            begin
                digit_val = {1'b0, in1};
                digit_en = 4'b1101;
            end
        
        2'b10:	//select third 7Seg.
        
            begin
                digit_val = {1'b0, in2};
                digit_en = 4'b1011;
            end
        
        2'b11:	//select forth 7Seg.
        
            begin
                digit_val = {1'b0, in3};
                digit_en = 4'b0111;
            end
        endcase
    end
    
    //Convert digit number to LED vector. LEDs are active low.
    
    logic [6:0] sseg_LEDs;
    always @(*)
    begin
        sseg_LEDs = 7'b1111111; //default
        case( digit_val)
            5'd0 : sseg_LEDs = 7'b1000000; //to display 0
            5'd1 : sseg_LEDs = 7'b1111001; //to display 1
            5'd2 : sseg_LEDs = 7'b0100100; //to display 2
            5'd3 : sseg_LEDs = 7'b0110000; //to display 3
            5'd4 : sseg_LEDs = 7'b0011001; //to display 4
            5'd5 : sseg_LEDs = 7'b0010010; //to display 5
            5'd6 : sseg_LEDs = 7'b0000010; //to display 6
            5'd7 : sseg_LEDs = 7'b1111000; //to display 7
            5'd8 : sseg_LEDs = 7'b0000000; //to display 8
            5'd9 : sseg_LEDs = 7'b0010000; //to display 9
            5'd10: sseg_LEDs = 7'b0001000; //to display a
            5'd11: sseg_LEDs = 7'b0000011; //to display b
            5'd12: sseg_LEDs = 7'b1000110; //to display c
            5'd13: sseg_LEDs = 7'b0100001; //to display d
            5'd14: sseg_LEDs = 7'b0000110; //to display e
            5'd15: sseg_LEDs = 7'b0001110; //to display f
            5'd16: sseg_LEDs = 7'b0110111; //to display "="
            default : sseg_LEDs = 7'b0111111; //dash 
        endcase
    end
    
    assign an = digit_en;
    
    assign seg = sseg_LEDs;
    assign dp = 1'b1; //turn dp off
    
endmodule



`timescale 1ns / 1ps


module pulse_controller(
	input CLK, sw_input, clear,
	output reg clk_pulse );

	 reg [2:0] state, nextstate;
	 reg [27:0] CNT; 
	 wire cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule




`timescale 1ns / 1ps
module main(
    input  logic        CLK,               
    input  logic        button_clk,        
    input  logic        button_reset,      
    output logic        memwrite_led,      
    output logic [6:0]  seg,              
    output logic [3:0]  an,               
    output logic        dp                 
);
    // Internal signals
    logic mips_clk; 
    logic mips_reset;      
    logic clear = 0;            
    logic [31:0] writedata, dataadr, readdata;
    logic memwrite;

    logic [3:0] display_val3, display_val2, display_val1, display_val0;
    
    assign display_val3 = writedata[7:4]; 
    assign display_val2 = writedata[3:0];
    assign display_val1 = dataadr[7:4]; 
    assign display_val0 = dataadr[3:0];

    pulse_controller clock_pulse(
        .CLK(CLK),
        .sw_input(button_clk),
        .clear(clear),
        .clk_pulse(mips_clk)
    );

    pulse_controller reset_pulse(
        .CLK(CLK),
        .sw_input(button_reset),
        .clear(clear),
        .clk_pulse(mips_reset)
    );

    top top(
        .clk(mips_clk),
        .reset(mips_reset),
        .writedata(writedata), 
        .dataadr(dataadr), 
        .readdata(readdata),           
        .memwrite(memwrite)
    );

    display_controller display_ctrl(
        .clk(CLK),
        .in3(display_val3),
        .in2(display_val2),
        .in1(display_val1),
        .in0(display_val0),
        .seg(seg),
        .dp(dp),
        .an(an)
    );

    assign memwrite_led = memwrite;

endmodule


`timescale 1ns / 1ps

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
   initial begin
        for (int i = 0; i < 64; i = i + 1)
            RAM[i] = 32'h0; 
    end
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule



`timescale 1ns / 1ps


module imem (
    input  logic [7:0]  addr,
    output logic [31:0] instr
);
    always_comb
        case (addr)
        //jalsub
        8'h00: instr = 32'h20040018;    // addi $4, $zero, 0x18    
        8'h04: instr = 32'h20050008;    // addi $5, $zero, 0x08    
        8'h08: instr = 32'h00850030;    // jalsub $4, $5           
        8'h0c: instr = 32'h20070003;    // addi $7, $zero, 3 #should not be executed
        8'h10: instr = 32'h23ff0006;    // addi $31, $31, 6       
        8'h14: instr = 32'h23e70000;    // addi $7, $31, 0         
        //ror 
        8'h18: instr = 32'h20020f0f;    // addi $2, $zero, 0x0F0F  
        8'h1c: instr = 32'h004018f8;    // ror $3, $2, 3  #t1 = 0xE00001E1
        8'h20: instr = 32'h0x00001020; //add $2, $0, $0
        // Original MIPS test program
        8'h24: instr = 32'h20020005;    // addi $2, $zero, 5      
        8'h28: instr = 32'h2003000c;    // addi $3, $zero, 12      
        8'h2c: instr = 32'h2067fff7;    // addi $7, $3, -9         
        8'h30: instr = 32'h00e22025;    // or $4, $7, $2          
        8'h34: instr = 32'h00642824;    // and $5, $3, $4         
        8'h38: instr = 32'h00a42820;    // add $5, $5, $4        
        8'h3c: instr = 32'h10a70011;    // beq $5, $7, 0x44
        8'h40: instr = 32'h0064202a;    // slt $4, $3, $4
        8'h44: instr = 32'h10800001;    // beq $4, $zero, 1
        8'h48: instr = 32'h20050000;    // addi $5, $zero, 0
        8'h4c: instr = 32'h00e2202a;    // slt $4, $7, $2
        8'h50: instr = 32'h00853820;    // add $7, $4, $5
        8'h54: instr = 32'h00e23822;    // sub $7, $7, $2
        8'h58: instr = 32'hac670044;    // sw $7, 68($3)
        8'h5c: instr = 32'h8c020050;    // lw $2, 80($zero)
        8'h60: instr = 32'h0800001a;    // j 0x68 (skip next instruction)
        8'h64: instr = 32'h20020001;    // addi $2, $zero, 1
        8'h68: instr = 32'hac020054;    // sw $2, 84($zero)
        8'h6c: instr = 32'h0800001b;    // j 0x6c (infinite loop)
        default: instr = 32'hxxxxxxxx;   // Unknown address
        endcase
endmodule



`timescale 1ns / 1ps

// single-cycle MIPS processor, with controller and datapath
// jalsub ror signals added
module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, jalsub, ror;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc, alusrc, regdst, regwrite, jump, jalsub, ror, alucontrol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, jalsub, ror, alucontrol, zero, pc, instr, aluout, writedata, readdata);

endmodule



`timescale 1ns / 1ps

// jalsub ror control signals

module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump, 
                  output logic     jalsub, ror,
                  output logic[2:0] alucontrol);

   logic [1:0] aluop;
   logic       branch;

   maindec md (op, funct, memtoreg, memwrite, branch, alusrc, regdst, regwrite,  jalsub, ror, jump,  aluop);

   aludec  ad (funct, aluop, alucontrol);

   assign pcsrc = branch & zero;

endmodule



`timescale 1ns / 1ps


module maindec (
    input logic[5:0] op, funct, 
    output logic memtoreg, memwrite, branch,
    output logic alusrc, regdst, regwrite, jalsub, ror, jump,
    output logic [1:0] aluop
);
    logic [10:0] controls;
    
    assign {regwrite, regdst, alusrc, branch, memwrite,
             memtoreg, aluop, jump, jalsub, ror} = controls;
             
    always_comb begin
        controls = 11'b00000000000;         
        case (op)
            6'b000010: controls = 11'b00000000100; // J 
            6'b000000: begin // R-type instructions
                case (funct)
                    6'b100000: controls = 11'b11000010000; // ADD
                    6'b100010: controls = 11'b11000010000; // SUB
                    6'b100100: controls = 11'b11000010000; // AND
                    6'b100101: controls = 11'b11000010000; // OR
                    6'b101010: controls = 11'b11000010000; // SLT
                    6'b110000: controls = 11'b01010001110; // JALSUB
                    6'b111000: controls = 11'b11000000001; // ROR
                    default:   controls = 11'b00000000000; // Illegal funct
                endcase
            end
            6'b100011: controls = 11'b10100100000; // LW
            6'b101011: controls = 11'b00101000000; // SW
            6'b000100: controls = 11'b00010001000; // BEQ
            6'b001000: controls = 11'b10100000000; // ADDI
            default:   controls = 11'b00000000000; // Illegal opcode
        endcase
    end
endmodule




`timescale 1ns / 1ps


module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'b000; // ???
        endcase
    endcase
endmodule




`timescale 1ns / 1ps


module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, jalsub, ror,
		 input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 output logic[31:0] pc, 
	         input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	         input  logic[31:0] readdata);

  logic [4:0]  writereg;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch, pcnextbeforejalsub;
  logic [31:0] signimm, signimmsh, srca, srcb, resultbeforepcplus4, resultbeforeror, rorresult, result;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmuxbeforejalsub(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnextbeforejalsub);
  mux2 #(32) pcmux(pcnextbeforejalsub, aluout, jalsub, pcnext);

// register file logic
   regfile     rf (clk, regwrite, jalsub,instr[25:21], instr[20:16], writereg,
                   result, srca, writedata);

   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
   mux2 #(32)  resmux (aluout, readdata, memtoreg, resultbeforepcplus4);
   mux2 #(32)  muxwithjalsub(resultbeforepcplus4, pcplus4, jalsub, resultbeforeror);
   assign rorresult = ((srca >> instr[10:6]) | (srca << (32 - instr[10:6])));
   mux2 #(32) muxwithror(resultbeforeror, rorresult, ror, result);
   signext         se (instr[15:0], signimm);

  // ALU logic
   mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);

endmodule




`timescale 1ns / 1ps

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


`timescale 1ns / 1ps


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule


`timescale 1ns / 1ps


module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule


`timescale 1ns / 1ps


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule



`timescale 1ns / 1ps

module regfile (input    logic clk, we3, changeRA,
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];
  initial begin
        for (int i = 0; i < 32; i = i + 1)
            rf[i] = 32'h0;
    end

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff@(posedge clk)
      if(changeRA && !we3) begin
        rf[31] <= wd3;
      end
     else if (we3) begin
         rf [wa3] <= wd3;	
     end
    

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule


`timescale 1ns / 1ps


module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule




`timescale 1ns / 1ps


module alu(
    input  logic [31:0] a, b, 
    input  logic [2:0]  alucont, 
    output logic [31:0] result,
    output logic zero
);             
    always_comb begin
        result = 32'h0000_0000;
        
        case(alucont)
            3'b010: result = a + b;         // add
            3'b110: result = a - b;         // subtract
            3'b000: result = a & b;         // and
            3'b001: result = a | b;         // or
            3'b111: result = (a < b) ? 32'h0000_0001 : 32'h0000_0000;  // slt
            default: result = 32'h0000_0000;
        endcase
    end
    
    assign zero = (result == 32'h0000_0000);
endmodule




module top_tb();
    // Test signals
    logic clk;
    logic reset;
    logic [31:0] writedata, dataadr;
    logic [31:0] readdata;
    logic memwrite;
    
    // Register monitoring signals
    logic [31:0] reg2, reg3, reg4, reg5, reg7, reg31;  // Added reg31 for $ra
    
    // Instantiate the top module
    top dut(clk, reset, writedata, dataadr, readdata, memwrite);
    
    //registers
    assign reg2 = dut.mips.dp.rf.rf[2];   // $2 
    assign reg3 = dut.mips.dp.rf.rf[3];   // $3 
    assign reg4 = dut.mips.dp.rf.rf[4];   // $4 
    assign reg5 = dut.mips.dp.rf.rf[5];   // $5 
    assign reg7 = dut.mips.dp.rf.rf[7];   // $7 
    assign reg31 = dut.mips.dp.rf.rf[31]; // $31 
    
    // clock
    always begin
        clk = 1; #5;
        clk = 0; #5;
    end
    
    initial begin
        $display("\nTime-PC-Instruction-$2-$3-$4-$5-$7-$ra-memwrite-writedata-dataaddr");        
        // start with reset
        reset = 1;
        @(posedge clk);
        @(posedge clk);
        reset = 0;
        repeat(30) begin
            @(negedge clk); 
            $display("%0t\t%h\t%h\t%h\t%h\t%h\t%h\t%h\t%h\t%h\t%h\t%h", 
                    $time, dut.pc, dut.instr,
                    reg2, reg3, reg4, reg5, reg7, reg31, memwrite, writedata, dataadr);
        end
        $display("\nSimulation finished");
        $finish;
    end
    
    // check for memwrite
    always @(negedge clk) begin
        if(memwrite) begin
            $display("memwrite %0t: dataaddr=%h, writedata=%h", 
                    $time, dataadr, writedata);
        end
    end
    
endmodule


module alu_tb();
    logic [31:0] a, b;
    logic [2:0] alucont;
    logic [31:0] result;
    logic zero;
    
    alu dut(a, b, alucont, result, zero);
    
    initial begin
        a = 32'hFFFF_FFFF; b = 32'hABCD_1234; alucont = 3'b000; #10; // and
        a = 32'h0000_000A; b = 32'h0000_0005; alucont = 3'b010; #10; // add
        a = 32'h0000_000A; b = 32'h0000_0005; alucont = 3'b110; #10; // subtraction
        a = 32'hFFFF_FFFF; b = 32'h0000_00FF; alucont = 3'b000; #10; // and
        a = 32'hFFFF_0000; b = 32'h0000_FFFF; alucont = 3'b001; #10; // or
        a = 32'h0000_0005; b = 32'h0000_000A; alucont = 3'b111; #10; // slt
        a = 32'h0000_0005; b = 32'h0000_0005; alucont = 3'b110; #10; // to see zero
        #10 $finish;
    end
endmodule
